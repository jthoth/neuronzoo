(function(n){function r(r){for(var t,i,c=r[0],l=r[1],u=r[2],v=0,f=[];v<c.length;v++)i=c[v],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&f.push(o[i][0]),o[i]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);s&&s(r);while(f.length)f.shift()();return a.push.apply(a,u||[]),e()}function e(){for(var n,r=0;r<a.length;r++){for(var e=a[r],t=!0,c=1;c<e.length;c++){var l=e[c];0!==o[l]&&(t=!1)}t&&(a.splice(r--,1),n=i(i.s=e[0]))}return n}var t={},o={app:0},a=[];function i(r){if(t[r])return t[r].exports;var e=t[r]={i:r,l:!1,exports:{}};return n[r].call(e.exports,e,e.exports,i),e.l=!0,e.exports}i.m=n,i.c=t,i.d=function(n,r,e){i.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:e})},i.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,r){if(1&r&&(n=i(n)),8&r)return n;if(4&r&&"object"===typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var t in n)i.d(e,t,function(r){return n[r]}.bind(null,t));return e},i.n=function(n){var r=n&&n.__esModule?function(){return n["default"]}:function(){return n};return i.d(r,"a",r),r},i.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},i.p="/neuronzoo/";var c=window["webpackJsonp"]=window["webpackJsonp"]||[],l=c.push.bind(c);c.push=r,c=c.slice();for(var u=0;u<c.length;u++)r(c[u]);var s=l;a.push([0,"chunk-vendors"]),e()})({0:function(n,r,e){n.exports=e("56d7")},"132df":function(n,r){n.exports="attribute vec3 position;\r\n\r\nuniform mat4 worldViewProjection;\r\nuniform float time;\r\n\r\n\r\n\r\nvarying float controlled_time;\r\n\r\nvoid main() {\r\n  gl_Position = worldViewProjection * vec4(position, 1.0);\r\n  controlled_time = ((time / 1000.0) + 1.0);\r\n}\r\n"},"542d":function(n,r){n.exports="\r\nvarying float controlled_time;\r\nuniform float num_octaves;\r\n\r\n#define PI 3.141592653589793\r\n\r\nfloat random (in vec2 _st) {\r\n    return fract(sin(dot(_st.xy,\r\n                         vec2(12.9898,78.233)))*\r\n        43758.5453123);\r\n}\r\n\r\nhighp float noise(in vec2 uv) {\r\n    vec2 i = floor(uv);\r\n    vec2 f = fract(uv);\r\n    float a = random(i);\r\n    float b = random(i + vec2(1.0, 0.0));\r\n    float c = random(i + vec2(0.0, 1.0));\r\n    float d = random(i + vec2(1.0, 1.0));\r\n    vec2 u = f * f * (3.0 - 2.0 * f);\r\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\r\n}\r\n\r\nfloat fbm ( in vec2 uv) {\r\n    float v = 0.0;\r\n    float a = 0.5;\r\n    vec2 shift = vec2(100.0);\r\n    mat2 rot = mat2(cos(0.5), sin(0.5),-sin(0.5), cos(0.50));\r\n    for (int i = 0; i < int(num_octaves); ++i) {\r\n        v += a * noise(uv);\r\n        uv = rot * uv * 2.0 + shift;\r\n        a *= 0.5;\r\n    }\r\n    return v;\r\n}\r\n\r\n\r\n\r\nvoid main() {\r\n\r\n  vec2 st = gl_FragCoord.xy/120.0;\r\n\r\n  vec3 color = vec3(0.0);\r\n  vec2 q = vec2(0.);\r\n\r\n  q.x = fbm( st + 0.00 * controlled_time);\r\n  q.y = fbm( st + vec2(1.0));\r\n\r\n  vec2 r = vec2(0.);\r\n  r.x = fbm( st + 1.0 * q + vec2(1.7,9.2)+ 0.15 * controlled_time );\r\n  r.y = fbm( st + 1.0 * q + vec2(8.3,2.8)+ 0.126 * controlled_time);\r\n\r\n  float f = fbm(st + r);\r\n\r\n  color = mix(vec3(0.101961,0.619608,0.666667),\r\n              vec3(0.666667,0.666667,0.498039),\r\n              clamp((pow(f, 2.0)) * 4.0, 0.0, 1.0));\r\n\r\n  color = mix(color, vec3(0,0,0.164706), clamp(length(q),0.0,1.0));\r\n\r\n  color = mix(color, vec3(0.666667,1,1), clamp(length(r.x),0.0,1.0));\r\n\r\n  gl_FragColor = vec4((pow(f, 3.0) + .6 * pow(f, 2.0) + .5 * f) * color,1.);\r\n\r\n}\r\n"},"56d7":function(n,r,e){"use strict";e.r(r);var t=e("2b0e"),o=function(){var n=this,r=n.$createElement,e=n._self._c||r;return e("v-app",[e("v-app-bar",{attrs:{app:""}},[e("v-toolbar-title",{staticClass:"headline text-uppercase"},[e("span",[n._v("CC7515")]),e("span",{staticClass:"font-weight-light"},[n._v(" GPU COMPUTING")])])],1),e("v-content",[e("Neurons")],1)],1)},a=[],i=function(){var n=this,r=n.$createElement,e=n._self._c||r;return e("v-container",{attrs:{fluid:"","grid-list-xl":""}},[e("v-row",[e("v-col",{attrs:{cols:"2",md:"3"}},[e("v-card",{staticClass:"pa-2",attrs:{raised:"",tile:""}},[e("v-col",{attrs:{cols:"12"}},[e("div",{staticClass:"overline mb-4"},[e("v-icon",[n._v("mdi-apache-kafka")]),n._v("Fractal Brownian Motion Over Neuron Operation")],1),e("v-select",{staticClass:"mt-7",attrs:{label:"Generation","item-text":"name","item-value":"value",items:n.generations,outlined:""},model:{value:n.generation,callback:function(r){n.generation=r},expression:"generation"}}),e("v-select",{attrs:{label:"Neuron","item-text":"name","item-value":"value",items:n.neurons,outlined:""},model:{value:n.neuron,callback:function(r){n.neuron=r},expression:"neuron"}}),e("label",{staticClass:"overline"},[n._v("Size Input "+n._s(n.size_input))]),e("v-slider",{attrs:{max:5,min:0,step:.25},model:{value:n.size_input,callback:function(r){n.size_input=r},expression:"size_input"}}),e("label",{staticClass:"overline"},[n._v("Size Cell Body "+n._s(n.size_body))]),e("v-slider",{attrs:{max:5,min:0,step:.25},model:{value:n.size_body,callback:function(r){n.size_body=r},expression:"size_body"}}),e("label",{staticClass:"overline"},[n._v("Size Output "+n._s(n.size_output))]),e("v-slider",{attrs:{max:5,min:0,step:.25},model:{value:n.size_output,callback:function(r){n.size_output=r},expression:"size_output"}})],1),e("label",{staticClass:"overline"},[e("v-icon",[n._v("mdi-settings")]),n._v(" Scroll to zoop up or down and Mouse Control ")],1)],1)],1),e("v-col",{attrs:{cols:"8",md:"9"}},[e("v-card",{staticClass:"pa-2",attrs:{raised:"",tile:""}},[e("Scene",[e("Property",{attrs:{name:"clearColor",color:"#FFF"}}),e("HemisphericLight"),e("Asset",{attrs:{src:n.generation.src,position:[0,0,0],rotation:[0,1.5,-2.1]}}),e("Sphere",{attrs:{scaling:[n.size_body,n.size_body,n.size_body]}},[e("Shader",{attrs:{name:"inline",vertexShader:n.vertexShader,fragmentShader:n.cellBodyfragmentShader}},[e("Uniform",{attrs:{variable:"num_octaves",float:n.generation.neurons.length}})],1)],1),n._l(n.generation.neurons,(function(r){return e("Box",{attrs:{position:r,scaling:[n.size_input,n.size_input,n.size_input],rotation:[0,1.5,-2.1]}},[e("Shader",{attrs:{name:"inline",vertexShader:n.vertexShader,fragmentShader:n.inputfragmentShader}},[e("Uniform",{attrs:{variable:"num_octaves",float:n.generation.neurons.length}})],1)],1)})),e("Box",{attrs:{position:n.generation.output,scaling:[n.size_output,n.size_output,n.size_output],rotation:[0,1.5,-2.1]}},[e("Shader",{attrs:{name:"inline",vertexShader:n.vertexShader,fragmentShader:n.outputfragmentShader}},[e("Uniform",{attrs:{variable:"num_octaves",float:n.generation.neurons.length}}),e("Uniform",{attrs:{variable:"neuron",float:n.neuron}})],1)],1)],2)],1)],1)],1)],1)},c=[],l=e("910b"),u=e("132df"),s=e.n(u),v=e("542d"),f=e.n(v),m=e("cd9d"),d=e.n(m),p=e("69f8"),_=e.n(p);l["a"].Effect.ShadersStore["VertexShader"]=s.a,l["a"].Effect.ShadersStore["inputFragmentShader"]=f.a,l["a"].Effect.ShadersStore["cellFragmentShader"]=d.a,l["a"].Effect.ShadersStore["outputFragmentShader"]=_.a;var b={name:"Waves",data(){let n=[{name:"Firsth",value:{src:"/neuronzoo/v1.obj",neurons:[[-4.6,-.3,0],[-4.5,.4,-.55]],output:[4,.05,.38]}},{name:"Second",value:{src:"/neuronzoo/v2.obj",neurons:[[-4.9,-.3,-.1],[-5,-.7,.1],[-4.8,.15,-.4],[-4.75,.48,-.55]],output:[4,1.1,-.3]}},{name:"Third",value:{src:"/neuronzoo/v3.obj",neurons:[[-3.8,.2,-.35],[-3.89,1,1.2],[-3.6,2.7,-.15],[-4.4,-2,-.45],[-3.4,-1,2.5],[-4,-.6,-1.4],[-3.93,1,-2.5]],output:[4.4,.45,.48]}}];return{size_input:.35,size_body:1,size_output:.5,generations:n,neurons:[{name:"Step",value:1},{name:"Sigmoid",value:2},{name:"Thangent",value:3},{name:"Leaky Integrate and Fire",value:4}],generation:n[1].value,neuron:2}},methods:{loadDataset:function(){}},computed:{vertexShader(){return s.a},inputfragmentShader(){return f.a},cellBodyfragmentShader(){return d.a},outputfragmentShader(){return _.a}}},h=b,x=e("2877"),g=e("6544"),y=e.n(g),S=e("b0af"),z=e("62ad"),w=e("a523"),C=e("132d"),P=e("0fd9"),q=e("b974"),O=e("ba0d"),j=Object(x["a"])(h,i,c,!1,null,null,null),F=j.exports;y()(j,{VCard:S["a"],VCol:z["a"],VContainer:w["a"],VIcon:C["a"],VRow:P["a"],VSelect:q["a"],VSlider:O["a"]});var V={name:"App",components:{Neurons:F},data:()=>({})},T=V,k=e("7496"),M=e("40dc"),U=e("a75b"),I=e("2a7f"),A=Object(x["a"])(T,o,a,!1,null,null,null),B=A.exports;y()(A,{VApp:k["a"],VAppBar:M["a"],VContent:U["a"],VToolbarTitle:I["a"]});var E=e("f309");t["a"].use(E["a"]),t["a"].use(l["b"]);var N=new E["a"]({icons:{iconfont:"mdi"}});t["a"].config.productionTip=!1,new t["a"]({vuetify:N,render:n=>n(B)}).$mount("#app")},"69f8":function(n,r){n.exports="\r\nvarying float controlled_time;\r\nuniform float num_octaves;\r\nuniform float neuron;\r\n\r\n#define PI 3.141592653589793\r\n#define TAU_MP 20.0\r\n\r\nfloat random (in vec2 _st) {\r\n    return fract(sin(dot(_st.xy,\r\n                         vec2(12.9898,78.233)))*\r\n        43758.5453123);\r\n}\r\n\r\nhighp float noise(in vec2 uv) {\r\n    vec2 i = floor(uv);\r\n    vec2 f = fract(uv);\r\n    float a = random(i);\r\n    float b = random(i + vec2(1.0, 0.0));\r\n    float c = random(i + vec2(0.0, 1.0));\r\n    float d = random(i + vec2(1.0, 1.0));\r\n    vec2 u = f * f * (3.0 - 2.0 * f);\r\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\r\n}\r\n\r\nfloat fbm ( in vec2 uv) {\r\n    float v = 0.0;\r\n    float a = 0.5;\r\n    vec2 shift = vec2(100.0);\r\n    mat2 rot = mat2(cos(0.5), sin(0.5),-sin(0.5), cos(0.50));\r\n    for (int i = 0; i < int(num_octaves); ++i) {\r\n        v += a * noise(uv);\r\n        uv = rot * uv * 2.0 + shift;\r\n        a *= 0.5;\r\n    }\r\n    return v;\r\n}\r\n\r\nvec3 compute_lif(in vec3 compound){\r\n  float x = exp(compound[0]/TAU_MP)*compound[0];\r\n  float y = exp((compound[1] - compound[0])/TAU_MP)*compound[1];\r\n  float z  =exp((compound[2] - compound[1])/TAU_MP)*compound[2];\r\n\r\n  return vec3(x + y + z);\r\n}\r\n\r\nvec4 compute_activation_function(in vec3 compound){\r\n\r\n  mat4 container = mat4(1.);\r\n\r\n  container[0] = vec4(step(.5, compound), 1.);\r\n  container[1] = vec4(1.0 / (1. + exp(-compound)), 1.);\r\n  container[2] = vec4(tan(compound), 1.);\r\n  container[3] = vec4(compute_lif(compound), 1.);\r\n\r\n  return container[int(neuron) - 1];\r\n}\r\n\r\nvoid main() {\r\n\r\n  vec2 st = gl_FragCoord.xy/120.0;\r\n\r\n  vec3 color = vec3(0.0);\r\n  vec2 q = vec2(0.);\r\n\r\n  q.x = fbm( st + 0.00 * controlled_time);\r\n  q.y = fbm( st + vec2(1.0));\r\n\r\n  vec2 r = vec2(0.);\r\n  r.x = fbm( st + 1.0 * q + vec2(1.7,9.2)+ 0.15 * controlled_time );\r\n  r.y = fbm( st + 1.0 * q + vec2(8.3,2.8)+ 0.126 * controlled_time);\r\n\r\n  float f = fbm(st + r);\r\n\r\n  color = mix(vec3(0.101961,0.619608,0.666667),\r\n              vec3(0.666667,0.666667,0.498039),\r\n              clamp((pow(f, 2.0)) * 4.0, 0.0, 1.0));\r\n\r\n  color = mix(color, vec3(0,0,0.164706), clamp(length(q),0.0,1.0));\r\n\r\n  color = mix(color, vec3(0.666667,1,1), clamp(length(r.x),0.0,1.0));\r\n\r\n  for (int i = 0; i < int(num_octaves); ++i) {\r\n    color += color * (pow(f, 3.0) + .6 * pow(f, 2.0) + .5 * f); // Compound axoms sumations supose I have\r\n    // a neuron for each pixel in the screen\r\n  }\r\n\r\n  gl_FragColor = compute_activation_function(color / num_octaves);\r\n\r\n}\r\n"},cd9d:function(n,r){n.exports="\r\nvarying float controlled_time;\r\nuniform float num_octaves;\r\n\r\n#define PI 3.141592653589793\r\n\r\nfloat random (in vec2 _st) {\r\n    return fract(sin(dot(_st.xy,\r\n                         vec2(12.9898,78.233)))*\r\n        43758.5453123);\r\n}\r\n\r\nhighp float noise(in vec2 uv) {\r\n    vec2 i = floor(uv);\r\n    vec2 f = fract(uv);\r\n    float a = random(i);\r\n    float b = random(i + vec2(1.0, 0.0));\r\n    float c = random(i + vec2(0.0, 1.0));\r\n    float d = random(i + vec2(1.0, 1.0));\r\n    vec2 u = f * f * (3.0 - 2.0 * f);\r\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\r\n}\r\n\r\nfloat fbm ( in vec2 uv) {\r\n    float v = 0.0;\r\n    float a = 0.5;\r\n    vec2 shift = vec2(100.0);\r\n    mat2 rot = mat2(cos(0.5), sin(0.5),-sin(0.5), cos(0.50));\r\n    for (int i = 0; i < int(num_octaves); ++i) {\r\n        v += a * noise(uv);\r\n        uv = rot * uv * 2.0 + shift;\r\n        a *= 0.5;\r\n    }\r\n    return v;\r\n}\r\n\r\n\r\n\r\nvoid main() {\r\n\r\n  vec2 st = gl_FragCoord.xy/120.0;\r\n  vec3 color = vec3(0.0);\r\n  vec2 q = vec2(0.);\r\n\r\n  q.x = fbm( st + 0.01 * controlled_time);\r\n  q.y = fbm( st + vec2(1.0));\r\n\r\n  vec2 r = vec2(0.);\r\n  r.x = fbm( st + 1.0 * q + vec2(1.7, 9.2) + 0.15 * controlled_time );\r\n  r.y = fbm( st + 1.0 * q + vec2(8.3, 2.8) + 0.126 * controlled_time);\r\n\r\n  float f = fbm(st + r);\r\n\r\n  color = mix(vec3(0.101961, 0.619608, 0.666667),\r\n              vec3(0.666667, 0.666667, 0.498039),\r\n              clamp((pow(f, 2.0)) * 4.0, 0.0, 1.0));\r\n\r\n  color = mix(color, vec3(0, 0, 0.164706), clamp(length(q), 0.0,1.0));\r\n  color = mix(color, vec3(0.666667,1,1), clamp(length(r.x), 0.0,1.0));\r\n\r\n  for (int i = 0; i < int(num_octaves); ++i) {\r\n    color += color * (pow(f, 3.0) + .6 * pow(f, 2.0) + .5 * f); // Compound axoms sumations supose I have\r\n    // a neuron for each pixel in the screen\r\n  }\r\n\r\n  gl_FragColor = vec4(color / num_octaves, 1.);\r\n\r\n}\r\n"}});
//# sourceMappingURL=app.a06e2987.js.map